#+OPTIONS: toc:2
#+TITLE: Config

  This document contains my personal configuration for Doom Emacs.

* General Settings
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Hamza Hamud"
          user-mail-address "self@hamzahamud.com")

    ;; Set default line numbers to relative
    (setq display-line-numbers-type t)
  #+END_SRC

* Doom Themes and Fonts
  This section outlines some additional functions and macros that are useful for configuring Doom Emacs.

  - ~load!'~: Used for loading external ~*.el~ files relative to the current file.
  - ~use-package!'~: For configuring packages within Emacs.
  - ~after!'~: Allows running code after a package has loaded.
  - ~add-load-path!'~: Adds directories to the ~load-path~, relative to the current file. Emacs searches the ~load-path~ when loading packages with ~require~ or ~use-package~.
  - ~map!'~: Used for binding new keys.

  To get information about any of these functions/macros, move the cursor over the highlighted symbol and press ~K~ (non-evil users must press ~C-c c k~). This will open documentation for the function/macro, including demos of how they are used.

  To see how these functions/macros are implemented, you can use ~gd~ (or ~C-c c d~) to jump to their definition.

  #+BEGIN_SRC emacs-lisp
;; doom themes
(setq doom-theme 'doom-spacegrey)
    ;; Set a custom font. Font choice can be important for performance.
(setq doom-font (font-spec :family "JetBrains Mono" :size 15 :weight 'light))
;; doom-themes
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
  #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp
(after! org
  (setq org-agenda-custom-commands
        '(("g" "Get Things Done (GTD)"
           ((tags "-projects/+NEXT|+INPROGRESS"
                  ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                   (org-agenda-overriding-header "\nTasks\n")))

            (tags "projects/NEXT"
                   ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                        (org-agenda-overriding-header "\n Projects Tasks\n")))

            (agenda ""
                    ((org-agenda-entry-types '(:deadline))
                     (org-deadline-warning-days 7)
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'notregexp "\\* TODO"))
                     (org-agenda-overriding-header "\nDeadlines\n")))

            (tags-todo "+daily"
                       ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                        (org-agenda-overriding-header "\nDaily Goals\n")))

            (tags-todo "+weekly"
                       ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                        (org-agenda-overriding-header "\nWeekly Goals\n")))

            (tags-todo "+monthly"
                       ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                        (org-agenda-overriding-header "\nMonthly Tasks\n")))

            (tags-todo "+yearly"
                       ((org-agenda-prefix-format "  %i %-12:c [%e] ")
                        (org-agenda-overriding-header "\nAnnual Goals\n")))

            (tags "CLOSED>=\"<today>\""
                  ((org-agenda-overriding-header "\nCompleted Today\n")))))

          ("R" "Monthly Review"
           ((tags "CLOSED>=\"<-1m>\""
                  ((org-agenda-overriding-header "\nCompleted This Month\n")
                   (org-agenda-prefix-format " %-12:c%?-12t% s")
                   ))))
          ))

(setq org-columns-default-formatc
      "%25ITEM %TODO %3PRIORITY %CLOSED")

(setq org-superstar-headline-bullets-list '("■" "▲" "━" "●" "•"))
(setq org-superstar-cycle-headline-bullets nil)

(setq org-agenda-inhibit-startup t)

(setq org-outline-path-complete-in-steps nil)


(setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
        '((sequence
           "TODO(t)"           ; A task that is ready to be tackled
           "WAIT(w)"           ; Something is holding up this task
           "NEXT(n)"           ; The next task to do in a project
           "INPROGRESS(p)"     ; A task is in progress
           "|"                 ; The pipe necessary to separate "active" states and "inactive" states
           "DONE(d)"           ; Task has been completed
           "INACTIVE(i)"       ; Projects that have yet to be started
           "CANCELLED(c)" )))  ; Task has been cancelled

;; set closed time on done tasks
(setq org-log-done 'time)
(setq org-agenda-files (directory-files-recursively "~/Documents/org/agenda" "\\.org$"))
(setq org-archive-location "~/Documents/org/archive/projects/%s_archive::")
(setq org-agenda-archives-mode t)
(setq org-roam-directory "~/Documents/org/info")


(setq org-table-eval-formulas t)
(global-set-key (kbd "C-c i") 'org-edit-src-code)

;;source code block syntax highlighting
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0))
  #+END_SRC


** Org Custom Functions
  #+BEGIN_SRC emacs-lisp
(defun hhamud/org-roam-backlink ()
     "display the backlinks of the current org-roam buffer"
     (interactive)
     (progn
        (display-buffer (get-buffer-create org-roam-buffer))
        (org-roam-buffer-persistent-redisplay)))
  #+END_SRC


** Org Mode Code Blocks
  #+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (defun my-adjoin-to-list-or-symbol (element list-or-symbol)
    (let ((list (if (not (listp list-or-symbol))
                    (list list-or-symbol)
                  list-or-symbol)))
      (require 'cl-lib)
      (cl-adjoin element list)))

  (eval-after-load "org"
    '(mapc
      (lambda (face)
        (set-face-attribute
         face nil
         :inherit
         (my-adjoin-to-list-or-symbol
          'fixed-pitch
          (face-attribute face :inherit))))

 (list 'org-code 'org-block 'org-table 'org-date
       'org-link 'org-footnote))))
  #+END_SRC

** Org Capture Templates
Creates a quick capture template to create a daily todo item for either the daily tasks or for the project tasks. It will check if the file already exists and if it does not then it will error out.

#+begin_src elisp
(setq org-capture-templates
      '(("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

** Org Agenda Helpers
  #+BEGIN_SRC emacs-lisp
;; Configuration for additional packages
(use-package! websocket
:after org-roam)
    ;; Org roam UI settings
(use-package! org-roam-ui
:after org-roam)
;; Configuration setting

(defun hhamud/copy-todo-to-file (todo-text)
  "Copy a completed todo to a file of your choosing."
  (interactive "sTodo text: ")
  (let* ((dir "~/Documents/org/agenda/review/2024/")
         (file (expand-file-name (read-file-name "Copy todo to file: " dir dir))))
    (find-file file)  ;; Open the file
    (goto-char (point-min))  ;; Go to the beginning of the file
    (if (re-search-forward "What did I accomplish" nil t)
        ;; If the "What did I accomplish" heading is found
        (progn
          (forward-line)  ;; Go to the next line
          (insert (format "CLOSED: [%s] %s\n" (format-time-string "%Y-%m-%d %H:%M") todo-text)))  ;; Insert the closed date and todo text
      (error "Heading not found"))
    (save-buffer)  ;; Save the file
    (kill-buffer)))  ;; Close the file


(defun hhamud/copy-region-todo-to-file (start end)
  "Copy the content of the selected region as a todo to a file of your choosing."
  (interactive "r")
  (let ((todo-text (buffer-substring-no-properties start end)))
    (hhamud/copy-todo-to-file todo-text)))

(add-hook 'org-after-todo-state-change-hook
          (lambda ()
            (when (string= org-state "DONE")
              (hhamud/copy-todo-to-file (org-get-heading t t)))))


(defun hhamud/get-current-week-string ()
  "Return the current week in the format 'mar01-07', starting from the first day of the month until the following Sunday."
  (let* ((time (current-time))
         (decoded-time (decode-time time))
         (current-day (nth 3 decoded-time))
         (current-month (nth 4 decoded-time))
         (current-year (nth 5 decoded-time))
         (first-day-of-month-time (encode-time 0 0 0 1 current-month current-year))
         (first-day-of-month-dow (nth 6 (decode-time first-day-of-month-time)))
         (days-to-sunday (- 7 first-day-of-month-dow))
         (week-end-day (+ 1 days-to-sunday))
         (week-start-string (downcase (format-time-string "%b%02d" first-day-of-month-time)))
         (week-end-string (format "%02d" week-end-day)))
    (concat week-start-string "-" week-end-string)))

(defun hhamud/path-builder ()
  "Helps to build the path to org review."
        (format "~/Documents/org/agenda/review/2024/%s/%s"
           (downcase (format-time-string "%B"))
             (hhamud/get-current-week-string)))

(defun hhamud/text-in-buffer-p (text)
  "Check if the given TEXT is present in the current buffer."
  (save-excursion
    (goto-char (point-min))
    (if (search-forward text nil t)
        t
      nil)))

(defun hhamud/reviewer ()
  "Displays the daily todo list in a new buffer."
  (interactive)
  (let* ((time (completing-read "Choose a time period: " '("daily" "weekly" "monthly")))
         (path (hhamud/path-builder))
         (file-path
          (cond
           ((string= time "daily") (format "%s/%s.org" path (downcase (format-time-string "%b%d"))))
           ((string= time "weekly") (format "%s/weekly-review.org" path))
           ((string= time "monthly") (format "~/Documents/org/agenda/review/2024/%s/monthly-review.org" (downcase (format-time-string "%B"))))))
         (buffer (find-file-noselect file-path)))
    (switch-to-buffer-other-window buffer)
    (if (hhamud/text-in-buffer-p "* What")
        (message "Org todo text already exists")
      (progn
        (insert (format "#+TITLE: %s" (file-name-base file-path)))
        (newline)
        (hhamud/org-review-calender-template)))))
  #+END_SRC


*** Helper functions to help manage goals
#+begin_src elisp
(defun hhamud/todo-creator (goal)
  "Creates a todo list"
  (interactive "sWhat is the goal: ")
  (let*  ((terms '("daily" "weekly" "monthly"))
          (terra (completing-read "Choose a time period: " terms nil t))
          (todo (format "** TODO %s :%s:" goal terra)))
       (insert todo)))

(global-set-key (kbd "C-c j") 'hhamud/todo-creator)

(defun hhamud/org-review-calender-template ()
"Creates a monthly review org template."
(interactive)
(insert (format "* What are my goals?:\n\n\n* What did I accomplish?:\n\n\n* What did I fail to accomplish and why?:\n\n")))
#+end_src


*** Helper function for counting words
#+begin_src emacs-lisp
(defun hhamud/count-words-in-buffer ()
  "Count the number of words in the current buffer."
  (interactive)
  (save-excursion
    (let ((count 0))
      (goto-char (point-min))
      (while (< (point) (point-max))
        (when (forward-word 1)
          (setq count (1+ count))))
      (message "Number of words in buffer: %d" count))))
#+end_src

*** Create a new org post
  #+begin_src emacs-lisp
(defun hhamud/create-org-post()
  "Creates yaml template for md-roam"
  (interactive)
  (insert
   (format ":PROPERTIES:\n:ID: %s:END:\n#+title: %s\n"
           (shell-command-to-string "uuidgen")
           (file-name-base (buffer-file-name)))))
  #+end_src

* Key Bindings
Pare edit remaps
  #+BEGIN_SRC emacs-lisp
(map!
 :map paredit-mode-map
 :leader (:prefix ("l" . "Lisps")
         :nvie "f" #'paredit-forward-slurp-sexp
         :nvie "b" #'paredit-forward-barf-sexp
         :nie "k" #'paredit-kill-region
         :nie "s" #'paredit-splice-sexp
         :nie "(" #'paredit-wrap-round
         :nie "[" #'paredit-wrap-square
         :nie "{" #'paredit-wrap-curly))

(defun hhamud/my-auto-insert-dollar ()
  "Automatically insert a dollar sign after inserting a dollar sign."
  (when (and (eq major-mode 'markdown-mode)
             (eq (char-before) ?$))
    (insert "$")
    (backward-char)))

(add-hook 'post-self-insert-hook 'hhamud/my-auto-insert-dollar)
  #+END_SRC

* Buffer Management
#+begin_src elisp
;; set default frame size upon open for emacs
(add-to-list 'default-frame-alist '(height . 80))
(add-to-list 'default-frame-alist '(width .  90))

(global-set-key (kbd "C-c f") 'hhamud/search-new-frame)
(global-set-key (kbd "C-c b") 'hhamud/search-recent)
(global-set-key (kbd "C-c d") 'delete-frame)
(global-set-key (kbd "C-c t") 'hhamud/new-terminal)
(global-set-key (kbd "C-c n") 'hhamud/search-project)

(defun hhamud/search-new-frame (workspace)
  "Creates a new frame after searching for a file."
  (interactive "Fselect file:")
  (let ((new_buffer (find-file-noselect workspace)))
  (make-frame)
  (set-window-buffer (selected-window) new_buffer)))

(defun hhamud/search-recent (workspace)
  "Creates a new frame after searching for a file in the most recent frame."
  (interactive "P")
  (let ((new-buffer (+ivy/switch-workspace-buffer workspace)))
    (make-frame)
    (set-window-buffer (selected-window) new-buffer)))

(defun hhamud/search-project ()
  "Creates a new frame from the selected PROJECT or INFO directory."
  (interactive)
  (let* ((option (completing-read "Select option: " '("PROJECT" "INFO" "PROGRAMMING") nil t))
         (directory (cond
                     ((string= option "PROJECT") "~/Documents/org/agenda/projects")
                     ((string= option "PROGRAMMING") "~/Documents/projects")
                     ((string= option "INFO") "~/Documents/org/info"))))
    (let ((file (read-file-name "Select file: " directory)))
      (find-file-other-frame file))))

(defun hhamud/new-terminal ()
  "Create a new frame with a vterm buffer."
  (interactive)
  (let ((vterm-buffer
    (make-frame `((name . "vterm")
                  (buffer . ,(vterm))))))))

(defun hhamud/cider-jackin ()
  "Create a new CIDER REPL frame."
  (interactive)
  (let ((cider-buffer
         (make-frame `((name . "cider")
                       (buffer . ,(cider))))))
    (cider-switch-to-repl-buffer)
    (delete-other-windows)
    (set-window-buffer (selected-window) cider-buffer)))
#+end_src

* Ligatures
#+BEGIN_SRC emacs-lisp
 (setq +ligatures-extra-symbols
        '(;; org
          :name          "»"
          :src_block     "»"
          :src_block_end "«"
          :quote         "“"
          :quote_end     "”"
          ;; Functional
          :lambda        "λ"
          :def           "ƒ"
          :composition   "○"
          :map           "→"
          ;; Types
          :null          "∅"
          :true          "⊤"
          :false         "⊥"
          :int           "ℤ"
          :float         "ℝ"
          :str           "ℂ"
          :bool          "𝔹"
          :list          "ℓ"
          ;; Flow
          :not           "¬"
          :in            "∈"
          :not-in        "∉"
          :and           "∧"
          :or            "∨"
          :for           "∀"
          :some          "∃"
          :return        "⟼"
          :yield         "⟻"
          ;; Other
          :union         "∪"
          :intersect     "∩"
          :diff          "∖"
          :tuple         "⨂"
          :pipe          "║"
          :dot           "•"))

  ;; Use as much of JetBrains Mono v2.221 as possible.
  ;; If a version >2.221 exists, see if new symbols are supported
  ;; and update below.
  (set-fontset-font t ?» (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?» (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?« (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?“ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?” (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?λ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?ƒ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∅ (font-spec :family "Fira Code"))
  (set-fontset-font t ?⊤ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?⊥ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?ℤ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?ℝ (font-spec :family "Fira Code"))
  (set-fontset-font t ?𝔹 (font-spec :family "Fira Code"))
  (set-fontset-font t ?ℂ (font-spec :family "Fira Code"))
  (set-fontset-font t ?∈ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∉ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∧ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∨ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∀ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∃ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?⟼ (font-spec :family "Fira Code"))
  (set-fontset-font t ?⟻ (font-spec :family "Fira Code"))
  (set-fontset-font t ?∪ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∩ (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?∖ (font-spec :family "Free Mono"))
  (set-fontset-font t ?⨂ (font-spec :family "Free Mono"))
  (set-fontset-font t ?• (font-spec :family "JetBrains Mono"))
  (set-fontset-font t ?⅓ (font-spec :family "Fira Code"))
  (set-fontset-font t ?⅔ (font-spec :family "Fira Code"))
#+END_SRC

* Dap debugging
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure
  :config
  (dap-ui-mode  )
  (dap-ui-controls-mode 1)

  ;; (require 'dap-lldb)
  (require 'dap-cpptools)
  ;; (require 'dap-gdb-lldb)
  ;; installs .extension/vscode
  ;; (dap-gdb-lldb-setup)
  (dap-cpptools-setup)
(dap-register-debug-template "Rust::CppTools Run Configuration"
                                 (list :type "cppdbg"
                                       :request "launch"
                                       :name "Rust::Run"
                                       :MIMode "gdb"
                                       :miDebuggerPath "rust-gdb"
                                       :environment []
                                       :program "${workspaceFolder}/target/debug/REPLACETHIS"
                                       :cwd "${workspaceFolder}"
                                       :console "external"
                                       :dap-compilation "cargo build"
                                       :dap-compilation-dir "${workspaceFolder}")))

  (with-eval-after-load 'dap-mode
    (setq dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
    (dap-auto-configure-mode +1))

#+end_src


* Custom Functions
#+begin_src elisp
(defun hhamud/get-key (key)
  "Gets VALUE of KEY from the env file."
  (interactive "skey: ")
  (let ((env-file (expand-file-name "./.env"))
        (regexp (format "^%s=\\(.*\\)$" key)))
    (if (file-exists-p env-file)
        (with-temp-buffer
          (insert-file-contents env-file)
          (goto-char (point-min))
          (if (re-search-forward regexp nil t)
              (match-string 1)
            (message (format"%s key not found in .env file" key))))
      (message "ENV file (.env) not found"))))
#+end_src

* AI
#+begin_src emacs-lisp
(use-package! elm)
#+end_src

* Markdown
#+begin_src elisp
(use-package grip-mode
  :ensure t
  :hook (markdown-mode . grip-mode))
#+end_src

* LSP
#+begin_src elisp
(use-package! lsp-bridge
  :config
  (setq lsp-bridge-enable-log nil)
  (global-lsp-bridge-mode))
#+end_src

* Arabic
#+begin_src elisp
(set-fontset-font t 'arabic "Times New Roman")
#+end_src

